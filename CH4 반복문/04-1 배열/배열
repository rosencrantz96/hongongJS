1. 배열: 여러 개의 변수를 한 번에 선언해 다룰 수 있는 자료형, [] 대괄호 사용해서 생성하고 내부의 값은 쉼표(,)로 구분해서 입력

2. 인덱스: 요소의 순서. 0부터 시작함. 배열[인덱스]! 

3. 배열 요소 개수 확인하기: 배열.length

4. 배열 뒷부분에 요소 추가하기 
4-1. push() 메소드 사용: 배열.push(요소)
4-2. 인덱스 사용: 
> const fruitA = ['사과', '배', '바나나']
Undefined

> fruitA[10] = '귤'
"귤"

> fruitA
(11) ["사과", "배", "바나나", empty x 7, "귤"]

혹은 

> const fruitB = ['사과', '배', '바나나']
Undefined

> fruitB[fruitB.length] = '귤'
"귤"

> fruitB
(4) ["사과", "배", "바나나", "귤"]

5. 배열 요소 제거하기 
5-1. 인덱스로 요소 제거하기: splice() 메소드 사용 (splice: 접합)
→ 일부를 제거한 뒤 붙이거나 중간에 다른 요소를 넣고 붙인다 

배열.splice(인덱스, 제거할 요소의 개수)

5-2. 값으로 요소 제거하기: indexOf() 메소드 사용해서 값의 위치를 추출한 뒤 splice() 메소드 사용해서 제거. 
indexOf() 메소드는 배열 내부에 요소가 있을 경우 인덱스를 리턴. 요소가 없을 때는 -1을 리턴. 

const 인덱스 = 배열.indexOf(요소)
배열.splice(인덱스, 1)

6. 배열의 특정 위치에 요소 추가하기: splice() 메소드 사용.

배열.splice(인덱스, 0, 요소) 
→ 메소드의 두 번째 매개 변수에 0을 입력하면 아무것도 제거하지 않으며 세 번째 매개 변수에 추가하고 싶은 요소를 입력. 


*자료의 비파괴와 파괴 
-비파괴적 처리: 처리 후에 원본 내용이 변경되지 않는다. + 연산자를 사용해 문자열을 연결하면 원본 내용이 변하지 않음.
-파괴적 처리: 처리 후에 원본 내용이 변경된다. push() 메소드를 실행한 뒤 array 값을 보면 원본과 달라짐. 
메모리를 절약할 수 있지만 원본이 사라지기 때문에 위험할 수 있다. 

